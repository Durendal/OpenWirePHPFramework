#!/usr/bin/env php

<?php


/*

OpenWire Framework 
Copyright 2013 OpenWire Security
Version: 1.1.3
Version Commit Date: 04/19/13

Credits to AntiPaste for the original 0x0F Framework

*/


$framework = new Framework;
$framework->run();

class Framework {

    const userAgent = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.11 (KHTML, like Gecko) Ubuntu/10.04 Chromium/17.0.963.56 Chrome/17.0.963.56 Safari/535.11';
    const threads = 10;
    const regexURL = '#^(https?://)?[a-zA-Z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}$#';
    const regexPath = '#^[a-zA-Z0-9\.\-_~\!\$&\'\(\)\*\+,;\=\:@/]+$#';

    private $defaultVariables;
    protected $time, $queries, $currentThread, $threadArray, $variables, $framework, $libs, $core;


    public function __construct()
    {
        $this->libs = array();
        $this->core = array();
        $this->queries = 0;
        $this->framework = $this;
        $this->time = microtime(true);
        $this->base = getcwd();
    }

    public function run()
    {
        $liblist = $this->preloadLibs();
        foreach($liblist as $lib)
            $this->loadLibrary(substr($lib, 5, -10));
        $corelist = $this->preloadCore();
        foreach($corelist as $core)
            $this->loadCore(substr($core, 5, -10));
        $this->core['modules']->preloadModules();
        $this->core['main']->outputHeader();
        $line = '';
        $exitCommands = array('quit', 'exit');

        do {

            $prompt1 = $this->libs['colours']->cstring("Openwire", "white");
            $prompt2 = $this->libs['colours']->cstring("Framework: ", "blue");
            $prompt = "$prompt1 $prompt2";
            $line = readline($prompt);
            $commands = explode(' ', $line);
            if (empty($commands) || in_array($commands[0], $exitCommands)) continue;
            switch ($commands[0]) {

                case 'help':
                $this->core['main']->showUsage(); break;

                case 'list':
                case 'show':
                if (empty($commands[1])) $this->core['main']->showUsage();
                else if ($this->core['modules']->setModType($commands[1])) $this->core['modules']->listModules();
                else if ($commands[1] == 'variables') $this->core['modules']->showVariables();
                else $this->core['main']->showUsage(); break;

                case 'load':
                if (empty($commands[1])) $this->core['main']->showUsage();
                else if($this->core['modules']->setModType($commands[1])){ 
                    if(count($commands) > 2) $this->core['modules']->loadModule($commands[2]);
                    else $this->core['main']->showUsage();} break;

                case 'set':
                    if (empty($commands[1]) || empty($commands[2])) $this->core['main']->showUsage();
                    $this->core['modules']->setValue($commands[1], $commands[2]); break;

                case 'libs':
                    $this->listLibraries(); break;

                case 'core':
                    $this->listCore(); break;

                case 'check':
                    $this->checkExploit(); break;

                case 'exploit':
                    $this->runExploit(); break;

                case 'clear':
                case 'cls':
                    $this->clearScreen(); break;

                case 'banner':
                    $this->core['main']->outputHeader(); break;

                default:
                    echo $this->libs['colours']->cstring("\tERROR: ", "red");
                    echo "{$line} is not a valid command\n";
            }    

                readline_add_history($line);
            } while (!in_array($line, $exitCommands));
    }

    private function preloadLibs()
    {
        $lib_files = array();
        $libs = glob('libs/*.php');
        for($i = 0; $i < count($libs); $i++)
        {
            $lib_files[$i] = $libs[$i];
            require_once $libs[$i];
        }
        return $lib_files;
    }

    private function preloadCore()
    {
        $core_files = array();
        $core = glob('core/*.php');
        for($i = 0; $i < count($core); $i++)
        {
            $core_files[$i] = $core[$i];
            require_once $core[$i];
        }
        return $core_files;
    }

    private function loadLibrary($lib)
    {
        if (!file_exists("libs/{$lib}.class.php")) {
            echo "OpenWire: {$lib} is not a valid library\n";
            return false;
        }
        require_once "libs/{$lib}.class.php";
        $class = "\\Libraries\\{$lib}";
        $this->libs[$lib] = new $class($this);
        if (!is_object($this->libs[$lib])) {
            echo "OpenWire: Error loading library {$lib}\n";
            return false;
        }
        return true;
    }

    private function loadCore($core)
    {
        if (!file_exists("core/{$core}.class.php")) {
            echo "OpenWire: {$core} is not a valid core function\n";
            return false;
        }
        require_once "core/{$core}.class.php";
        $class = "\\Core\\{$core}";
        $this->core[$core] = new $class($this);
        if (!is_object($this->libs[$core])) {
            echo "OpenWire: Error loading core function {$core}\n";
            return false;
        }
        return true;
    }

    private function listLibraries()
    {
        $this->preloadLibs();
        $classes = get_declared_classes();
        foreach ($classes as $class) {
            preg_match('#(Libraries\\\.*)#', $class, $matches);
            if (empty($matches[1])) continue;
            $lib = new $matches[1]($this);
            echo $this->libs['colours']->cstring("\t{$lib->name} - {$lib->description}\n", "blue");
            unset($module);
        }
        return true;
    }
    private function listCore()
    {
        $this->preloadCore();
        $classes = get_declared_classes();
        foreach ($classes as $class) {
            preg_match('#(Core\\\.*)#', $class, $matches);
            if (empty($matches[1])) continue;
            $core = new $matches[1]($this);
            echo $this->libs['colours']->cstring("\t{$core->name} - {$core->description}\n", "blue");
            unset($module);
        }
        return true;
    }

    private function checkExploit()
    {
        if (!$this->core['modules']->verifyModule()) return false;
        if (!$this->verifyVariables()) return false;
        $this->clearThreads();
        $vulnerable = $this->core['modules']->module->check();
        if ($vulnerable) echo " The target is vulnerable\n";
        else echo " The target is not vulnerable\n";
        return true;
    }
    private function runExploit()
    {
        if (!$this->core['modules']->verifyModule()) return false;
        if (!$this->core['modules']->verifyVariables()) return false;
        $this->core['modules']->clearThreads();
        $mod = $this->core['modules']->getModule();
        $vulnerable = $mod->check();
        if (!$vulnerable) {
            echo " The target is not vulnerable\n";
            return false;
        }
        echo $this->libs['colours']->cstring("\n\n\tRunning exploit...\n", "white");
        $status = $mod->exploit();
        if (!$status) {
            echo $this->libs['colours']->cstring("\n\n\tExploit Failed!\n", "green");
            return false;
        }
        echo $this->libs['colours']->cstring("\n\n\tExploit successful!\n", "green");
        return true;
    }

    protected function clearScreen()
    {
        $characters = array(27, 91, 72, 27, 91, 50, 74);
        foreach ($characters as $character) echo chr($character);
        return true;
    }
    protected function getExecutionTime($message = false)
    {
        $seconds = microtime(true) - $this->framework->time;
        if (!$message) return $seconds;
        switch (true) {
            case ($seconds < 60):
            $seconds = round($seconds, 2);
            $message = "{$seconds} seconds"; break;

            case ($seconds < 3600):
            $minutes = floor(($seconds / 60) % 60);
            $seconds = floor($seconds);
            $message = "{$minutes} minutes and {$seconds} seconds";
            break;

            default:
            $hours = floor($seconds / 3600);
            $minutes = floor(($seconds / 60) % 60);
            $seconds = floor($seconds % 60);
            $message = "{$hours} hours, {$minutes} minutes and {$seconds} seconds";
        }
        return $message;
    }
    protected function getURL()
    {
        if (!$this->core['modules']->verifyModule()) return false;
        return $this->core['modules']->module->target . $this->core['modules']->module->path;
    }
    protected function getOutput($handle)
    {
        return curl_multi_getcontent($handle);
    }
    protected function getCookies($output)
    {
        preg_match_all('#^Set-Cookie:\s*([^;]+;)#mi', $output, $matches);
        return implode(' ', $matches[1]);
    }
}
?>

