<?php
     
     
    namespace Core;
    use \Framework as Framework;
    

class modules extends Framework {
         
           protected $framework, $name, $description;
	   private $module, $defaultVariables, $modType;
       
            public function __construct($framework)
            {
		$this->framework = $framework;
        	$this->name = "modules";
        	$this->description = "Module functions";
	    }

// Start Module Functions
protected function preloadExploits()
{
    foreach (glob('../modules/exploit/*.php') as $file) require_once $file;
    var_dump($file);
    return true;
}



protected function preloadPayloads()
{
    $files = glob('/modules/payload/*.php');
    foreach ($files as $file) require_once $file;
    return true;
}



protected function preloadAux()
{
    $files = glob('../modules/aux/*.php');
    foreach ($files as $file) require_once $file;
    return true;
}



protected function verifyModule()
{
    if (!is_object($this->framework->module)) {
        echo $this->framework->libs['colours']->cstring("\n\n\tNo Module Defined", "blue");
        return false;
    }
    return true;
}



protected function loadModule($module)
{
    if (!file_exists("../modules/$this->modType/{$module}.php")) {
            echo $this->framework->libs['colours']->cstring("\n\n\t[ ", "white");
            echo $this->framework->libs['colours']->cstring("*", "red");
            echo $this->framework->libs['colours']->cstring(" ] ", "white");
            echo $this->framework->libs['colours']->cstring("{$module} is not a valid module\n\n", "blue");
            return false;
    }
    $this->module = null;
    require_once "../modules/$this->modType/{$module}.php";
    $class = "\\".ucfirst($this->modType)."\\{$module}";
    $this->module = new $class($this);

    if (!is_object($this->module)) {
            echo $this->framework->libs['colours']->cstring("\n\n\t[ ", "white");
            echo $this->framework->libs['colours']->cstring("*", "red");
            echo $this->framework->libs['colours']->cstring(" ] ", "white");
            echo $this->framework->libs['colours']->cstring("Error loading module {$module}\n\n", "blue");
            return false;
    }   
    $this->variables = array_merge($this->defaultVariables, $this->module->variables);
            echo $this->framework->libs['colours']->cstring("\n\n\t[ ", "white");
            echo $this->framework->libs['colours']->cstring("*", "green");
            echo $this->framework->libs['colours']->cstring(" ] ", "white");
            echo $this->framework->libs['colours']->cstring("{$this->module->name} loaded\n\n", "green");
            return true;
}



protected function listExploits()
{
    $this->preloadExploits();
    $classes = get_declared_classes();
    foreach ($classes as $class) {
            preg_match('#(exploit\\\.*)#', $class, $matches);
            if (empty($matches[1])) continue;
            $exploit = new $matches[1]($this);
            echo $this->framework->libs['colours']->cstring("\n\n            OpenWire Framework\n", "blue");
            echo $this->framework->libs['colours']->cstring("      List of all Exploit Modules\n\n", "purple");
            echo $this->framework->libs['colours']->cstring("\t{$exploit->name} ", "white");
            echo $this->framework->libs['colours']->cstring("- {$exploit->description}\n\n", "blue");
            unset($exploit);
    }
    return true;
}



protected function listPayloads()
{
    $this->preloadPayloads();
    $classes = get_declared_classes();
    foreach ($classes as $class) {
            preg_match('#(payload\\\.*)#', $class, $matches);
            if (empty($matches[1])) continue;
            $payload = new $matches[1]($this);
            echo $this->framework->libs['colours']->cstring("\n\n            OpenWire Framework\n", "blue");
            echo $this->framework->libs['colours']->cstring("      List of all Payload Modules\n\n", "purple");
            echo $this->framework->libs['colours']->cstring("\t{$payload->name} ", "white");
            echo $this->framework->libs['colours']->cstring("- {$payload->description}\n\n", "blue");
            unset($payload);
    }
    return true;
}
protected function listAux()
{
    $this->preloadAux();
    $classes = get_declared_classes();
    foreach ($classes as $class) {
            preg_match('#(aux\\\.*)#', $class, $matches);
            if (empty($matches[1])) continue;
            $aux = new $matches[1]($this);
            echo $this->framework->libs['colours']->cstring("\n\n            OpenWire Framework\n", "blue");
            echo $this->framework->libs['colours']->cstring("      List of all Auxiliary Modules\n\n", "purple");
            echo $this->framework->libs['colours']->cstring("\t{$aux->name} ", "white");
            echo $this->framework->libs['colours']->cstring("- {$aux->description}\n\n", "blue");
            unset($aux);
    }
    return true;
}
protected function listType()
{
    return $this->modType;
}

protected function setModType($type)
{
    switch($type)
    {
        case 'aux':
            $this->modType = 'aux';
            break;

        case 'exploit':
            $this->modType = 'exploit';
            break;

        case 'payload':
            $this->modType = 'payload';
            break;

        default:
            $this->modType = null;
            return false;
    }
    return true;
}
// End Module Functions

}
?>
